{"version":3,"file":"background.js","mappings":"AAEA","sources":["webpack://chrome-extension/./src/background/background.js"],"sourcesContent":["// import firebase from 'firebase/compat/app';\r\n//   import 'firebase/compat/auth';\r\nchrome.runtime.onInstalled.addListener(() => {\r\n    console.log('i just installed my chrome extensions');\r\n});\r\n// Extension (Content Script): Listen for messages from the Web App\r\n// window.addEventListener('message', (event) => {\r\n//     if (event.origin !== 'http://localhost:3000/') {\r\n//       // Make sure the message is from the trusted web app\r\n//       return;\r\n//     }\r\n  \r\n//     if (event.data.type === 'SEND_TOKEN') {\r\n//       const token = event.data.token;\r\n//       console.log('Received token from web app:', token);\r\n//       // Handle the token, like authenticating the user\r\n//     }\r\n//   });\r\n  \r\n  \r\n  \r\n//   const firebaseConfig = {\r\n//     apiKey: \"AIzaSyASUJlnUutu5AN9CXXcxyAC1cwX7P_Ez54\",\r\n//     authDomain: \"chrome-ext-40d06.firebaseapp.com\",\r\n//     projectId: \"chrome-ext-40d06\",\r\n//   };\r\n  \r\n//   if (!firebase.apps.length) {\r\n//     firebase.initializeApp(firebaseConfig);\r\n//   }\r\n  \r\n//   firebase.auth().onAuthStateChanged((user) => {\r\n//     console.log('Auth state changed:', user);\r\n//   });\r\n  \r\n//   chrome.runtime.onMessageExternal.addListener((message, sender, sendResponse) => {\r\n//     const { token } = message;\r\n//     if (!token) {\r\n//       console.error('No token received');\r\n//       return sendResponse({ success: false, error: 'Token missing' });\r\n//     }\r\n  \r\n//     firebase\r\n//       .auth()\r\n//       .signInWithCustomToken(token)\r\n//       .then(() => {\r\n//         console.log('User signed in');\r\n//         sendResponse({ success: true });\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error('Sign-in error:', error);\r\n//         sendResponse({ success: false, error: error.message });\r\n//       });\r\n  \r\n//     return true; // Keep the message channel open for async response\r\n//   });\r\n  \r\n  \r\n// chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {\r\n//   console.log(msg);\r\n//   console.log(sender);\r\n//   sendResponse(\"Front the background Script\");\r\n// });\r\n// background.\r\n// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n//   console.log(message);\r\n//   console.log(sender);\r\n//   if (message.action === 'contentScriptReady') {\r\n//     // Handle the message from the content script\r\n//     console.log('Content script is ready');\r\n\r\n//     // Process some data and send a response back to the content script\r\n//     const data = 'Response data from background';\r\n//     chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\r\n//       chrome.tabs.sendMessage(tabs[0].id, { action: 'backgroundResponse', data });\r\n//     });\r\n//   }\r\n// });\r\n\r\n// chrome.runtime.onMessage.addListener(async(request, sender, sendResponse) => {\r\n//     console.log(request);\r\n//     console.log(sender);\r\n//     console.log(sendResponse);\r\n//     sendResponse({farewell: 'goodbye'});\r\n    \r\n//       // chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\r\n//       //   console.log('tab updated');\r\n//       //   console.log(tabId);\r\n//       //   console.log(changeInfo);\r\n//       //   console.log(tab);\r\n//       // });\r\n    \r\n//   })\r\n\r\n// chrome.runtime.onMessage.addListener(async(message, sender, sendResponse) => {\r\n//   console.log(message);\r\n//   console.log(sender);\r\n//   sendResponse(\"From the background Script\");\r\n// })\r\n\r\n// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n//     if (message.action === 'injectRecordTab') {\r\n//       chrome.scripting.executeScript({\r\n//         target: { tabId: sender.tab.id },\r\n//         function: () => {\r\n//           // Create and inject the Record Tab component into the webpage\r\n//           const recordTabComponent = document.createElement('div');\r\n//           recordTabComponent.id = 'recordTabComponent'; // Set a unique ID for the component\r\n//           // You can add your styling or other setup for the component here\r\n  \r\n//           // Append the component to the webpage\r\n//           document.body.appendChild(recordTabComponent);\r\n//         },\r\n//       });\r\n//     }\r\n//   });\r\n\r\n// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n//     if (message.action === 'injectRecordTab') {\r\n//       // Create and inject the RecordTab component into the webpage\r\n//       const recordTabComponent = document.createElement('div');\r\n//       recordTabComponent.className = 'record-tab'; // Set your desired class name\r\n//       // You can add your styling or other setup for the component here\r\n  \r\n//       // Append the component to the webpage\r\n//       document.body.appendChild(recordTabComponent);\r\n//     }\r\n//   });\r\n\r\n// chrome.runtime.onInstalled.addListener(() => {\r\n//     console.log('Extension has been installed or updated.');\r\n//   });\r\n  \r\n//   // Listen for a message from the content script\r\n//   chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n//     if (message.action === 'injectRecordTab') {\r\n//       // Find the active tab\r\n//       chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\r\n//         const tab = tabs[0];\r\n//         if (tab) {\r\n//           // Inject the content script into the active tab\r\n//           chrome.scripting.executeScript({\r\n//             target: { tabId: tab.id },\r\n//             function: () => {\r\n//               // Create and inject the RecordTab component into the webpage\r\n//               const recordTabComponent = document.createElement('div');\r\n//               recordTabComponent.id = 'recordTabComponent'; // Set a unique ID for the component\r\n//               // You can add your styling or other setup for the component here\r\n  \r\n//               // Append the component to the webpage\r\n//               document.body.appendChild(recordTabComponent);\r\n//             },\r\n//           });\r\n//         }\r\n//       });\r\n//     }\r\n//   });\r\n  \r\n\r\n// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n//    console.log(message);\r\n//    console.log(sender);\r\n//    sendResponse('i have been injected')\r\n//     if (message.action === 'injectRecordTab') {\r\n//       chrome.scripting.executeScript({\r\n//         target: { tabId: sender.tab.id },\r\n//         function: () => {\r\n//           // Create and inject the \"record tab\" component into the webpage\r\n//           const recordTabComponent = document.createElement('div');\r\n//           recordTabComponent.id = 'recordTabComponent'; // Set a unique ID for the component\r\n//           // You can add your styling or other setup for the component here\r\n  \r\n//           // Append the component to the webpage\r\n//           document.body.appendChild(recordTabComponent);\r\n//         },\r\n//       });\r\n//     }\r\n//   });\r\n\r\n// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n//     console.log(message);\r\n//     console.log(sender);\r\n//     sendResponse(\"Front the background Script\");\r\n//     if (message.action === 'injectRecordTab') {\r\n//       if (sender.tab && sender.tab.id) {\r\n//         chrome.scripting.executeScript({\r\n//           target: { tabId: sender.tab.id },\r\n//           function: () => {\r\n//             // Create and inject the \"record tab\" component into the webpage\r\n//             const recordTabComponent = document.createElement('div');\r\n//             recordTabComponent.id = 'recordTabComponent'; // Set a unique ID for the component\r\n//             // You can add your styling or other setup for the component here\r\n  \r\n//             // Append the component to the webpage\r\n//             document.body.appendChild(recordTabComponent);\r\n//           },\r\n//         });\r\n//       } else {\r\n//         console.error('Sender tab or tab id is missing. Cannot inject content script.');\r\n//       }\r\n//     }\r\n//   });\r\n// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n//     if (message.action === 'getTabId') {\r\n//       // Get the current tab's information\r\n//       chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\r\n//         if (tabs[0] && tabs[0].id) {\r\n//           const tabId = tabs[0].id;\r\n//           // Send the tabId back to popup.jsx\r\n//           chrome.runtime.sendMessage({ action: 'sendTabId', tabId });\r\n//         } else {\r\n//           console.error('Error: Unable to get the tabId');\r\n//         }\r\n//       });\r\n//     }\r\n//   });\r\n// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n//     console.log(message);\r\n//     console.log(sender);\r\n//     sendResponse('From the background script');\r\n    \r\n//     if (message.action === 'injectRecordTab') {\r\n//       if (sender.tab && sender.tab.id) {\r\n//         chrome.scripting.executeScript({\r\n//           target: { tabId: sender.tab.id },\r\n//           function: () => {\r\n//             // Create and inject the \"record tab\" component into the webpage\r\n//             const recordTabComponent = document.createElement('div');\r\n//             recordTabComponent.id = 'recordTabComponent'; // Set a unique ID for the component\r\n//             // You can add your styling or other setup for the component here\r\n    \r\n//             // Append the component to the webpage\r\n//             document.body.appendChild(recordTabComponent);\r\n//           },\r\n//         });\r\n//       } else {\r\n//         console.error('Sender tab or tab id is missing. Cannot inject content script.');\r\n//       }\r\n//     }\r\n//   });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n//   console.log(message)\r\n//   console.log(sender);\r\n//   sendResponse(\"Front the background Script\");\r\n//   if (message.action === 'start') {\r\n//     console.log('bg script');\r\n//     chrome.scripting.executeScript({\r\n//             target: { tabId: message.tabId },\r\n//             files: [\"../content/contentScript.js\"]\r\n//     })\r\n    \r\n//   }\r\n// });\r\n\r\n// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n//   console.log(message);\r\n//   if (message.action === 'injectRecordTab' && message.tabId) {\r\n//     // Use chrome.scripting.executeScript to inject the 'record tab' component into the active tab.\r\n//     chrome.scripting.executeScript({\r\n//       target: { tabId: message.tabId },\r\n//       files: [\"../content/contentScript.js\"],\r\n//     //   function: () => {\r\n//     //     // Your code to inject the 'record tab' component should go here.\r\n//     //     // Example: Create and inject a div element into the webpage.\r\n//     //     const recordTabComponent = document.createElement('div');\r\n//     //     recordTabComponent.id = 'recordTabComponent'; // Set a unique ID for the component\r\n//     //     // Add your styling or other setup for the component here.\r\n//     //     recordTabComponent.style.backgroundColor = 'blue';\r\n//     //     recordTabComponent.style.color = 'white';\r\n//     //     recordTabComponent.style.border = '1px solid red';\r\n//     //     recordTabComponent.style.width = '10%';\r\n//     //     recordTabComponent.style.height = '8vh';\r\n\r\n//     //     // Append the component to the webpage.\r\n//     //     document.body.appendChild(recordTabComponent);\r\n//     //   },\r\n//      });\r\n//   }\r\n// });\r\n\r\n// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n//   console.log(message);\r\n//   console.log(sender);\r\n//   if (message.action === \"request_recording\") {\r\n//     console.log(\"requesting recording\");\r\n\r\n//     sendResponse(`processed: ${message.action}`);\r\n//     console.log('hi');\r\n//   }\r\n// });\r\n\r\n// chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\r\n//   console.log(tabId);\r\n//   if (changeInfo.status === \"complete\" && /^http/.test(tab.url) || /^https/.test(tab.url)) {\r\n//     chrome.scripting\r\n//       .executeScript({\r\n//         target: { tabId },\r\n//         files: [\"../content/contentScript.js\"],\r\n//       })\r\n//       .then(() => {\r\n//         console.log(\"Injected successfully\");\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(`Error ${err}`);\r\n//       });\r\n//   }\r\n// });\r\n"],"names":[],"sourceRoot":""}